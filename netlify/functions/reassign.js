import { Client } from "@notionhq/client";
const ensureHomePage = async (notion) => { const search = await notion.search({ query: "Workday Timer (Home)", filter: { property: "object", value: "page" }, sort: { direction: "descending", timestamp: "last_edited_time" } }); const found = search.results.find(r => r.object === "page" && r.properties?.title); if (found) return found.id; const page = await notion.pages.create({ parent: { type: "workspace", workspace: true }, properties: { title: { title: [{ type: "text", text: { content: "Workday Timer (Home)" } }] } } }); return page.id; };
const ensureDatabases = async (notion, homeId) => { const dbs = {}; const search = await notion.search({ query: "Clients Projects Time Log", filter: { property: "object", value: "database" }, sort: { direction: "descending", timestamp: "last_edited_time" } }); for (const r of search.results) { const title = r.title?.[0]?.plain_text || ""; if (title === "Clients") dbs.clients = r; if (title === "Projects") dbs.projects = r; if (title === "Time Log") dbs.timeLog = r; } if (!dbs.clients || !dbs.projects || !dbs.timeLog) return null; return { clients: dbs.clients.id, projects: dbs.projects.id, timeLog: dbs.timeLog.id }; };
const findByTitle = async (notion, database_id, name) => { const res = await notion.databases.query({ database_id, filter: { property: "Name", title: { equals: name } }, page_size: 1 }); return res.results[0]; };
const createClient = async (notion, dbId, name) => await notion.pages.create({ parent: { database_id: dbId }, properties: { "Name": { title: [{ type: "text", text: { content: name } }] } } });
const createProject = async (notion, dbId, name, clientId) => await notion.pages.create({ parent: { database_id: dbId }, properties: { "Name": { title: [{ type: "text", text: { content: name } }] }, "Client": { relation: [{ id: clientId }] } } });
export async function handler(event) { if (event.httpMethod !== "POST") return { statusCode: 405, body: "Method not allowed" }; const token = (event.headers.authorization || "").replace(/^Bearer\s+/i, ""); if (!token) return { statusCode: 401, body: "Missing authorization" }; try { const body = JSON.parse(event.body || "{}"); const { sessionId, client, project } = body; if (!sessionId || !client || !project) return { statusCode: 400, body: "Missing fields" }; const notion = new Client({ auth: token }); const homeId = await ensureHomePage(notion); const db = await ensureDatabases(notion, homeId); if (!db) return { statusCode: 500, body: "Databases not found" }; const q = await notion.databases.query({ database_id: db.timeLog, filter: { property: "Session ID", rich_text: { equals: sessionId } }, page_size: 1 }); const page = q.results[0]; if (!page) return { statusCode: 404, body: "Session not found" }; let c = await findByTitle(notion, db.clients, client); if (!c) c = await createClient(notion, db.clients, client); let p = await findByTitle(notion, db.projects, project); if (!p) p = await createProject(notion, db.projects, project, c.id); await notion.pages.update({ page_id: page.id, properties: { "Client": { relation: [{ id: c.id }] }, "Project": { relation: [{ id: p.id }] } } }); return { statusCode: 200, body: JSON.stringify({ ok: true }) }; } catch (e) { return { statusCode: 500, body: "Reassign error: " + e.message }; } }